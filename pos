library(Seurat)

# create object for Infected population count matrix
pos.only.data <- Read10X(data.dir = "pos_tsv")
pos.only.object <- CreateSeuratObject(counts = pos.data, project = "Pos")
pos.only.object

# calculate percentage of total transcripts from mt-genes
pos.only.object[["percent.mt"]] <- PercentageFeatureSet(pos.object, pattern = "^MT-")

# calculate percentage of total transcripts from rp-genes
pos.only.object[["percent.rp"]] <- PercentageFeatureSet(pos.object, pattern = "^RP")

# visualize aggr.object QC metrics as a violin plot
VlnPlot(pos.only.object, features = c("nFeature_RNA", "nCount_RNA", "percent.mt", "percent.rp"), ncol = 4, pt.size = 0.5)

# Filter out low quality reads - nGene filter sets min for unique features and UMI counts
pos.deseq <- subset(x = pos.only.object, 
                  subset = (nFeature_RNA >= 200) &
                    (nFeature_RNA <= 8000) & 
                    (nCount_RNA >= 1000) &
                    (percent.mt < 30))

# check population cell numbers
table(pos.deseq$orig.ident)

# visualize pos.deseq QC metrics as a violin plot
VlnPlot(pos.deseq, features = c("nFeature_RNA", "nCount_RNA", "percent.mt", "percent.rp"), ncol = 4, pt.size = 0.5)

# run sctransform for Clustering, use default variable features limit (3,000), regress out percent.mt, nGene **SCT Assay**
pos.deseq <- SCTransform(pos.deseq, vars.to.regress = c("percent.mt"), verbose = FALSE)

# run PCA and plot
pos.deseq <- RunPCA(pos.deseq, verbose = FALSE, assay = "SCT")
DimPlot(pos.deseq, reduction = 'pca')

# cluster cells
pos.deseq <- FindNeighbors(pos.deseq, dims = 1:40, verbose = FALSE, assay = "SCT")
pos.deseq <- FindClusters(pos.deseq, verbose = FALSE)

# Extract counts
counts.pos <- GetAssayData(object = pos.deseq, slot = "counts")

# Output a logical vector for every gene on whether the more than zero counts per cell
nonzero.pos <- counts.pos > 0

# Sums all TRUE values and returns TRUE if more than 1 TRUE values per gene
keep_genes.pos <- Matrix::rowSums(nonzero.pos) >= 1

# Only keeping those genes expressed in more than 1 cell
filtered_counts.pos <- counts.pos[keep_genes.pos, ]

# Reassign to filtered Seurat object
pos.deseq <- CreateSeuratObject(filtered_counts.pos, meta.data = pos.deseq@meta.data)

# run dge analysis for pos cluster 0 vs. other clusters
pos.deseq.0 <- FindMarkers(object = pos.deseq, ident.1 = "0", ident.2 = NULL, assay = "RNA", test.use = "DESeq2")

# create csv file and export
write.csv(pos.deseq.0, file = "pos.deseq.0.csv")

# run dge analysis for pos cluster 1 vs. other clusters
pos.deseq.1 <- FindMarkers(object = pos.deseq, ident.1 = "1", ident.2 = NULL, assay = "RNA", test.use = "DESeq2")

# create csv file and export
write.csv(pos.deseq.1, file = "pos.deseq.1.csv")

# run dge analysis for pos cluster 2 vs. other clusters
pos.deseq.2 <- FindMarkers(object = pos.deseq, ident.1 = "2", ident.2 = NULL, assay = "RNA", test.use = "DESeq2")

# create csv file and export
write.csv(pos.deseq.2, file = "pos.deseq.2.csv")

# run dge analysis for pos cluster 3 vs. other clusters
pos.deseq.3 <- FindMarkers(object = pos.deseq, ident.1 = "3", ident.2 = NULL, assay = "RNA", test.use = "DESeq2")

# create csv file and export
write.csv(pos.deseq.3, file = "pos.deseq.3.csv")

# run dge analysis for pos cluster 4 vs. other clusters
pos.deseq.4 <- FindMarkers(object = pos.deseq, ident.1 = "4", ident.2 = NULL, assay = "RNA", test.use = "DESeq2")

# create csv file and export
write.csv(pos.deseq.4, file = "pos.deseq.4.csv")
